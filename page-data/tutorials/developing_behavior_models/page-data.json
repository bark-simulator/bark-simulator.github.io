{"componentChunkName":"component---src-templates-tutorials-js","path":"/tutorials/developing_behavior_models/","result":{"data":{"markdownRemark":{"html":"<p>Now, to the fun part! In this section, we will develop our first BARK behavior model.\n<br />\n<br /></p>\n<p>In order for a behavior model to work in BARK it needs to be derived from the <code class=\"language-text\">BehaviorModel</code> class.\nThis class has three virtual functions that can be overloaded: <code class=\"language-text\">Plan</code>, <code class=\"language-text\">Clone</code>, and <code class=\"language-text\">ActionToBehavior</code>.\nThe latter is only required if the action of the behavior model should be set externally.\nThe <code class=\"language-text\">Plan</code> function is the main functionality that needs to be implemented.\nIt returns a trajectory and stores the trajectory internally for the behavior model.\nThe <code class=\"language-text\">Clone</code> function specifies how a behavior model should be cloned.\n<br />\n<br /></p>\n<p>A basic derived behavior model class could look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">from</span> bark<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>behavior <span class=\"token keyword\">import</span> BehaviorModel\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DerivedBehaviorModel</span><span class=\"token punctuation\">(</span>BehaviorModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>\n               params<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    BehaviorModel<span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">Plan</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> step_time<span class=\"token punctuation\">,</span> observed_world<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">Clone</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">ActionToBehavior</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code></pre></div>\n<p>However, this would not be a valid behavior model as the <code class=\"language-text\">Plan</code> function does not return or set a trajectory.\n<br />\n<br />\nTo implement a valid behavior model, let us modify the <code class=\"language-text\">Plan</code> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">Plan</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> step_time<span class=\"token punctuation\">,</span> observed_world<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  trajectory_points <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n  start_time <span class=\"token operator\">=</span> observed_world<span class=\"token punctuation\">.</span>GetWorldTime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  ego_vehicle_state <span class=\"token operator\">=</span> observed_world<span class=\"token punctuation\">.</span>CurrentEgoState<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  trajectory_time <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span>\n    start_time<span class=\"token punctuation\">,</span> start_time <span class=\"token operator\">+</span> step_time<span class=\"token punctuation\">,</span> trajectory_points<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># 10 time steps x (time, x, y, theta and velocity)</span>\n  trajectory <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>shape<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>trajectory_points<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  trajectory<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> trajectory_time\n  trajectory<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ego_vehicle_state\n  <span class=\"token comment\"># store the trajectory and return it</span>\n  <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>SetTrajectory<span class=\"token punctuation\">(</span>trajectory<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> trajectory</code></pre></div>\n<p>This now poses a fully functional behavior model. Although, it does not do much besides standing on a single point.\nHowever, for simplicity reasons let us continue with this model.\n<br />\n<br />\nNext, we need to generate scenarios and set our newly created behavior model for the ego vehicle.\nTherefore, we use the same scenario used as in the <a href=\"/tutorials/\" class=\"text-blue-600\">merging example</a> but modify the scenario generation slightly.\n<br />\n<br />\nWe now set the <code class=\"language-text\">DerivedBehaviorModel</code> for the controlled behavior model as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomLaneCorridorConfig</span><span class=\"token punctuation\">(</span>LaneCorridorConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>\n               params<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n               <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>CustomLaneCorridorConfig<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n  \n  <span class=\"token keyword\">def</span> <span class=\"token function\">goal</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> world<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    road_corr <span class=\"token operator\">=</span> world<span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">.</span>GetRoadCorridor<span class=\"token punctuation\">(</span>\n      self<span class=\"token punctuation\">.</span>_road_ids<span class=\"token punctuation\">,</span> XodrDrivingDirection<span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">)</span>\n    lane_corr <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_road_corridor<span class=\"token punctuation\">.</span>lane_corridors<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># defines goal polygon on the left lane</span>\n    <span class=\"token keyword\">return</span> GoalDefinitionPolygon<span class=\"token punctuation\">(</span>lane_corr<span class=\"token punctuation\">.</span>polygon<span class=\"token punctuation\">)</span>\n  \n  <span class=\"token keyword\">def</span> <span class=\"token function\">controlled_behavior_model</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> world<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> DerivedBehaviorModel<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_params<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The ego vehicle's behavior model is now the <code class=\"language-text\">DerivedBehaviorModel</code>.\nOnce you run the modified <a href=\"/tutorials/\" class=\"text-blue-600\">merging example</a> code, the ego vehicle should just stand still and not move.\n<br />\n<br />\nCongratulations, you just successfully implemented your first behavior model in BARK!</p>","frontmatter":{"title":"Developing Behavior Models"}}},"pageContext":{"slug":"/tutorials/developing_behavior_models/"}}}