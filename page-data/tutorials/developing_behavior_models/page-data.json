{"componentChunkName":"component---src-templates-tutorials-js","path":"/tutorials/developing_behavior_models/","result":{"data":{"markdownRemark":{"html":"<p>The <code class=\"language-text\">BehaviorModel</code> class is the core component that defines how an agent acts/plans in the environment.\nIn this tutorial, a simple Python behavior model is created that drives in a straight line.\nThe video below provides additional insights on the development of behavior models for BARK.</p>\n<br />\n<div align=\"center\">\n<p>\n        <div class=\"embedVideo-container\">\n            <iframe\n              title=\"\"\n              width=\"800\"\n              height=\"400\"\n              src=\"https://www.youtube-nocookie.com/embed/5qS7gzabp_c?rel=0\"\n              class=\"embedVideo-iframe\"\n              style=\"border:0\"\n              \n              loading=\"lazy\"\n              allowfullscreen\n\t      sandbox=\"allow-same-origin allow-scripts allow-popups\"\n            ></iframe>\n        </div></p>\n</div>\n<br />\n<p>All behavior models in BARK are derived from the <code class=\"language-text\">BehaviorModel</code> base-class.\nThe base class implements three virtual functions that have to be (<code class=\"language-text\">Plan</code>, <code class=\"language-text\">Clone</code>) or can be overloaded (<code class=\"language-text\">ActionToBehavior</code>).\nThe function <code class=\"language-text\">ActionToBehavior</code> does not need to be overloaded besides if the action of the behavior model is set externally.</p>\n<p>The core functionality resides within the <code class=\"language-text\">Plan</code> function that outputs a state-space trajectory for an agent.\nThe <code class=\"language-text\">Clone</code> function specifies how a behavior model is cloned, e.g., if members should be preserved or be reset.</p>\n<p>A simple derived behavior model class is given by:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">from</span> bark<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>behavior <span class=\"token keyword\">import</span> BehaviorModel\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DerivedBehaviorModel</span><span class=\"token punctuation\">(</span>BehaviorModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>\n               params<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    BehaviorModel<span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">Plan</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> step_time<span class=\"token punctuation\">,</span> observed_world<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">Clone</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">ActionToBehavior</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code></pre></div>\n<p>However, this is not a valid behavior model as the <code class=\"language-text\">Plan</code> function does not return or set a trajectory and the clone function does not return an object.\nFor a behavior model that drives in s straight line, the <code class=\"language-text\">Plan</code> function can be modified as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">Plan</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> step_time<span class=\"token punctuation\">,</span> observed_world<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  trajectory_points <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n  start_time <span class=\"token operator\">=</span> observed_world<span class=\"token punctuation\">.</span>GetWorldTime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  ego_vehicle_state <span class=\"token operator\">=</span> observed_world<span class=\"token punctuation\">.</span>CurrentEgoState<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  trajectory_time <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span>\n    start_time<span class=\"token punctuation\">,</span> start_time <span class=\"token operator\">+</span> step_time<span class=\"token punctuation\">,</span> trajectory_points<span class=\"token punctuation\">)</span>\n  x_position <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> trajectory_points<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># 10 time steps x (time, x, y, theta and velocity)</span>\n  trajectory <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>shape<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>trajectory_points<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  trajectory<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> trajectory_time\n  trajectory<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x_position\n  trajectory<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ego_vehicle_state<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\"># store the trajectory and return it</span>\n  <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>SetTrajectory<span class=\"token punctuation\">(</span>trajectory<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> trajectory</code></pre></div>\n<br />\n<p>To use the new newly generated behavior model in the scenario generation, the <code class=\"language-text\">LaneCorridorConfig</code> has to be modified slightly from the <a href=\"/tutorials/\" class=\"aggBlueText\">getting started</a> to:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomLaneCorridorConfig</span><span class=\"token punctuation\">(</span>LaneCorridorConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>\n               params<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n               <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>CustomLaneCorridorConfig<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">goal</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> world<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    road_corr <span class=\"token operator\">=</span> world<span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">.</span>GetRoadCorridor<span class=\"token punctuation\">(</span>\n      self<span class=\"token punctuation\">.</span>_road_ids<span class=\"token punctuation\">,</span> XodrDrivingDirection<span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">)</span>\n    lane_corr <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_road_corridor<span class=\"token punctuation\">.</span>lane_corridors<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># defines goal polygon on the left lane</span>\n    <span class=\"token keyword\">return</span> GoalDefinitionPolygon<span class=\"token punctuation\">(</span>lane_corr<span class=\"token punctuation\">.</span>polygon<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">controlled_behavior_model</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> world<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> DerivedBehaviorModel<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_params<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The ego vehicle's behavior model is now the <code class=\"language-text\">DerivedBehaviorModel</code>.</p>","frontmatter":{"title":"Developing Behavior Models"}}},"pageContext":{"slug":"/tutorials/developing_behavior_models/"}},"staticQueryHashes":["1503014085","3885506533","4018511916","63159454"]}