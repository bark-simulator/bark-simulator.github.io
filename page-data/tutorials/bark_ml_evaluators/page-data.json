{"componentChunkName":"component---src-templates-tutorials-js","path":"/tutorials/bark_ml_evaluators/","result":{"data":{"markdownRemark":{"html":"<p>BARK-ML evaluators define the reward signal and wehther an episode is terminal or not.\n<br />\n<br />\nThe base evaluator (<code class=\"language-text\">BaseEvaluator</code>) is given by:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseEvaluator</span><span class=\"token punctuation\">(</span>ABC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token triple-quoted-string string\">\"\"\"Evaluates the state of the environment\n  \"\"\"</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>\n               params<span class=\"token operator\">=</span>ParameterServer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>_params <span class=\"token operator\">=</span> params\n    self<span class=\"token punctuation\">.</span>_evaluators <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator annotation punctuation\">@abstractmethod</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">_add_evaluators</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># NOTE: add BARK evaluators</span>\n    <span class=\"token comment\"># evaluators = {}</span>\n    <span class=\"token comment\"># evaluators[\"goal_reached\"] = EvaluatorGoalReached()</span>\n    <span class=\"token comment\"># evaluators[\"collision\"] = EvaluatorCollisionEgoAgent()</span>\n    <span class=\"token comment\"># evaluators[\"step_count\"] = EvaluatorStepCount()</span>\n    <span class=\"token comment\"># evaluators[\"drivable_area\"] = EvaluatorDrivableArea()</span>\n    <span class=\"token comment\"># return evaluators</span>\n    <span class=\"token keyword\">pass</span>\n\n  <span class=\"token decorator annotation punctuation\">@abstractmethod</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">_evaluate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> observed_world<span class=\"token punctuation\">,</span> eval_results<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Returns information about the current world state.\"\"\"</span>\n    <span class=\"token comment\"># terminal = False</span>\n    <span class=\"token comment\"># success = eval_results[\"goal_reached\"]</span>\n    <span class=\"token comment\"># step_count = eval_results[\"step_count\"]</span>\n    <span class=\"token comment\"># collision = eval_results[\"collision\"] or eval_results[\"drivable_area\"] or \\</span>\n    <span class=\"token comment\">#  (step_count > self._max_steps)</span>\n    <span class=\"token comment\"># if success or collision or step_count > self._max_steps:</span>\n    <span class=\"token comment\">#   terminal = True</span>\n\n    <span class=\"token comment\"># calculate reward</span>\n    <span class=\"token comment\"># reward = collision * self._col_penalty + \\</span>\n    <span class=\"token comment\">#   success * self._goal_reward</span>\n    <span class=\"token comment\"># return reward, terminal, eval_results</span>\n    <span class=\"token keyword\">pass</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">Evaluate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> observed_world<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Evaluates the observed world\n    \"\"\"</span>\n    eval_results<span class=\"token punctuation\">,</span> reward<span class=\"token punctuation\">,</span> terminal <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span>\n    eval_results <span class=\"token operator\">=</span> observed_world<span class=\"token punctuation\">.</span>Evaluate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    reward<span class=\"token punctuation\">,</span> terminal<span class=\"token punctuation\">,</span> eval_results <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_evaluate<span class=\"token punctuation\">(</span>\n      observed_world<span class=\"token punctuation\">,</span> eval_results<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> reward<span class=\"token punctuation\">,</span> terminal<span class=\"token punctuation\">,</span> eval_results\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> world<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># reset evaluators</span>\n    world<span class=\"token punctuation\">.</span>ClearEvaluators<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    evaluators <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_add_evaluators<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> evaluator <span class=\"token keyword\">in</span> evaluators<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      world<span class=\"token punctuation\">.</span>AddEvaluator<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> evaluator<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> world</code></pre></div>\n<p>Each <code class=\"language-text\">Evaluator</code> needs to overload the abstract functions <code class=\"language-text\">_add_evaluators(...)</code> and <code class=\"language-text\">_evaluate(...)</code>.\n<br />\n<br />\nCurrently available evaluators in BARK-ML:</p>\n<ul class=\"list-disc list-inside\">\n<li><b>GoalReached</b>: Gives a positive reward when the goal has been reached and a neagtive reward when a collision occurrs.</li>\n<li><b>RewardShapingEvaluator</b>: Potential-based reward shaping for the goal-distance, desired velocity and distance to other agents.</li>\n</ul>","frontmatter":{"title":"Evaluators"}}},"pageContext":{"slug":"/tutorials/bark_ml_evaluators/"}},"staticQueryHashes":["1503014085","3885506533","4018511916","63159454"]}