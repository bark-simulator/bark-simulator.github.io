{"componentChunkName":"component---src-templates-tutorials-js","path":"/tutorials/bark_ml_observers/","result":{"data":{"markdownRemark":{"html":"<p>BARK-ML observers convert the BARK world into a suitable input representation for machine learning, such as a vectorial representation that can be used by deep neural networks.\nThere are several observers available ranging from concatenated state vector to graph representations.\n<br />\n<br />\nThe observer base class (<code class=\"language-text\">StateObserver</code>) looks as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">StateObserver</span><span class=\"token punctuation\">(</span>ABC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>\n               params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>_params <span class=\"token operator\">=</span> params\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n  <span class=\"token decorator annotation punctuation\">@abstractmethod</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">Observe</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> observed_world<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Observes the world\n\n    Arguments:\n        world {bark.ObservedWorld} -- observed BARK world\n\n    Returns:\n        np.array -- array\n    \"\"\"</span>\n    <span class=\"token keyword\">pass</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> world<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n  <span class=\"token decorator annotation punctuation\">@property</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">observation_space</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code></pre></div>\n<p>Each <code class=\"language-text\">Observer</code> in BARK has to implement two functions (<code class=\"language-text\">Observe</code> and <code class=\"language-text\">Reset</code>) and the property <code class=\"language-text\">observation_space</code>.\nThe <code class=\"language-text\">Observe</code> function returns a machine learning friendly input representation, such as a numpy array or graph.\nObservers that trace vehicles over the course of an episode might require the <code class=\"language-text\">Reset</code> function to be overloaded to, e.g., reset member variables.\nAnd, finally, the property <code class=\"language-text\">observation_space</code> needs to be defined that tells the learning agent the dimension of the input space.\n<br />\n<br />\nBARK-ML implements currently these observers:</p>\n<ul class=\"list-disc list-inside\">\n<li><b>NearestAgentsObserver</b>: Concatenates the states of the n-nearest agents that are within a defined threshold radius.</li>\n<li><b>NearestObserver</b>: C++ observer that concatenates the states of the n-nearest agents that are within a defined threshold radius.</li>\n<li><b>SimpleObserver</b>: Concatenates the states of agents in the environment and returns a row vector.</li>\n<li><b>GraphObserver</b>: Returns a directed graph of N vehicles.</li>\n</ul>","frontmatter":{"title":"Observers"}}},"pageContext":{"slug":"/tutorials/bark_ml_observers/"}},"staticQueryHashes":["1503014085","3885506533","4018511916","63159454"]}