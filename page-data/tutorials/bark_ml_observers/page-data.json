{"componentChunkName":"component---src-templates-tutorials-js","path":"/tutorials/bark_ml_observers/","result":{"data":{"markdownRemark":{"html":"<p>BARK-ML observers convert the BARK world into a representation that can be used by machine learning algorithms, e.g. a vectorial representation.\nFor example, a simple observer could concatenated the n-nearest states of other vehicles around the ego vehicle.\n<br />\n<br />\nThe base class of the observer looks as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">StateObserver</span><span class=\"token punctuation\">(</span>ABC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>\n               params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>_params <span class=\"token operator\">=</span> params\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n  <span class=\"token decorator annotation punctuation\">@abstractmethod</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">Observe</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> observed_world<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Observes the world\n    \n    Arguments:\n        world {bark.ObservedWorld} -- observed BARK world\n    \n    Returns:\n        np.array -- array\n    \"\"\"</span>\n    <span class=\"token keyword\">pass</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> world<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n  <span class=\"token decorator annotation punctuation\">@property</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">observation_space</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code></pre></div>\n<p>Each derived observer has to implements the <code class=\"language-text\">Observe</code> function and has to provide the <code class=\"language-text\">observation_space</code>.\n<br />\n<br />\nCurrently available standard observers in BARK-ML:</p>\n<ul class=\"list-disc list-inside\">\n<li><b>NearestAgentsObserver</b>: Concatenates the states of the n-nearest agents that are within a defined threshold radius.</li>\n<li><b>NearestObserver</b>: C++ observer that concatenates the states of the n-nearest agents that are within a defined threshold radius.</li>\n<li><b>SimpleObserver</b>: Concatenates all agent states.</li>\n</ul>","frontmatter":{"title":"Observers"}}},"pageContext":{"slug":"/tutorials/bark_ml_observers/"}}}